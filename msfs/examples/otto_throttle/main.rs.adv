use simconnect::{DispatchResult, DWORD, SIMCONNECT_CLIENT_EVENT_ID, SIMCONNECT_OBJECT_ID};
use std::thread::sleep;
use std::time::Duration;

pub struct PIDController {
    kp: f64,
    ki: f64,
    kd: f64,
    integral: f64,
    prev_error: f64,
}

impl PIDController {
    pub fn new(kp: f64, ki: f64, kd: f64) -> Self {
        PIDController {
            kp,
            ki,
            kd,
            integral: 0.0,
            prev_error: 0.0,
        }
    }

    pub fn update(&mut self, error: f64, dt: f64) -> f64 {
        self.integral += error * dt;
        let derivative = (error - self.prev_error) / dt;
        self.prev_error = error;
        self.kp * error + self.ki * self.integral + self.kd * derivative
    }
}

struct SimVars {
    gen_eng_throttle_lever_pos: f64,
    airspeed_indicated: f64,
}

fn main() {
    let mut conn = simconnect::SimConnector::new();
    let mut ctrl = PIDController::new(1.0, 0.1, 0.0);

    conn.connect("A/T");

    conn.add_data_definition(
        0,
        "GENERAL ENG THROTTLE LEVER POSITION:1",
        "Percent",
        simconnect::SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_FLOAT64,
        0 as DWORD,
        0.0,
    );

    conn.add_data_definition(
        0,
        "AIRSPEED INDICATED",
        "Knots",
        simconnect::SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_FLOAT64,
        1 as DWORD,
        0.0,
    );

    conn.request_data_on_sim_object(
        0,
        0,
        0,
        simconnect::SIMCONNECT_PERIOD_SIMCONNECT_PERIOD_SIM_FRAME,
        0,
        0,
        0,
        0,
    );

    conn.map_client_event_to_sim_event(0 as SIMCONNECT_CLIENT_EVENT_ID, "THROTTLE_SET");

    loop {
        // println!("ENTER TARGET SPEED: ");

        // let mut input = String::new();
        // std::io::stdin().read_line(&mut input).unwrap();
        // let target_speed: f64 = input.trim().parse().unwrap();
        let target_speed: f64 = 250.0;

        loop {
            match conn.get_next_message() {
                Ok(DispatchResult::SimObjectData(data)) => unsafe {
                    if data.dwDefineID == 0 {
                        let sim_vars_ptr = std::ptr::addr_of!(data.dwData) as *const SimVars;
                        let sim_vars_val = std::ptr::read_unaligned(sim_vars_ptr);

                        let current_speed = sim_vars_val.airspeed_indicated;
                        let current_throttle_setting = sim_vars_val.gen_eng_throttle_lever_pos / 100.0;
                        let speed_error = target_speed - current_speed;

                        let ctrl_output = ctrl.update(speed_error, 0.016);
                        let throttle_adjustment = ctrl_output / 100.0;
                        let new_throttle_setting  = (current_throttle_setting + throttle_adjustment).clamp(0.0, 1.0);

                        // println!(
                        //     "SPD: {} (TGT: {}), THR: {}",
                        //     current_speed, target_speed, output
                        // );

                        conn.transmit_client_event(
                            0 as SIMCONNECT_OBJECT_ID,
                            0 as SIMCONNECT_CLIENT_EVENT_ID,
                            (16383.0 * new_throttle_setting).round() as DWORD,
                            simconnect::SIMCONNECT_GROUP_PRIORITY_HIGHEST,
                            simconnect::SIMCONNECT_EVENT_FLAG_GROUPID_IS_PRIORITY,
                        );

                        println!("{}", new_throttle_setting)
                    }
                },
                Ok(DispatchResult::Open(_)) => {
                    println!("ENGAGED");
                }
                Ok(DispatchResult::Quit(_)) => {
                    println!("DISENGAGED");
                }
                _ => (),
            }

            sleep(Duration::from_millis(16));
        }
    }
}
