use std::thread::sleep;
use std::time::Duration;
use simconnect::{DispatchResult, DWORD, SIMCONNECT_CLIENT_EVENT_ID, SIMCONNECT_OBJECT_ID};

struct DataStruct {
    throttle: f64,
    indicated_airspeed: i32,
}

fn main() {
    let mut conn = simconnect::SimConnector::new();

    conn.connect("Simple Program");

    conn.add_data_definition(
        0,
        "GENERAL ENG THROTTLE LEVER POSITION:1",
        "Percent",
        simconnect::SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_FLOAT64,
        0 as DWORD,
        0.0,
    );

    conn.add_data_definition(
        0,
        "AIRSPEED INDICATED",
        "Knots",
        simconnect::SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_INT32,
        1 as DWORD,
        0.0,
    );

    conn.request_data_on_sim_object(
        0,
        0,
        0,
        simconnect::SIMCONNECT_PERIOD_SIMCONNECT_PERIOD_SIM_FRAME,
        0,
        0,
        0,
        0,
    );

    conn.map_client_event_to_sim_event(
        0 as SIMCONNECT_CLIENT_EVENT_ID,
        "THROTTLE_SET"
    );

    // To keep the current speed as the last speed recorded.
    let mut last_speed = 0;

    loop {
        println!("Enter target indicated airspeed (kt): ");
        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();
        let target_speed: i32 = input.trim().parse().unwrap();

        loop {
            match conn.get_next_message() {
                Ok(DispatchResult::SimObjectData(data)) => unsafe {
                    if data.dwDefineID == 0 {
                        let sim_data_ptr = std::ptr::addr_of!(data.dwData) as *const DataStruct;
                        let sim_data_value = std::ptr::read_unaligned(sim_data_ptr);
                        let indicated_airspeed = sim_data_value.indicated_airspeed;
                        let throttle_setting = sim_data_value.throttle / 100.0;

                        // println!("THR: {}, SPD: {} (TGT: {}, LST: {})", throttle_setting, indicated_airspeed, target_speed, last_speed);

                        let set_throttle = |setting: f64| {
                            let data = (16383.0 * setting).round() as i32;

                            // println!("SET THR: {} ({})", data, setting);

                            conn.transmit_client_event(
                                0 as SIMCONNECT_OBJECT_ID,
                                0 as SIMCONNECT_CLIENT_EVENT_ID,
                                data as DWORD,
                                simconnect::SIMCONNECT_GROUP_PRIORITY_HIGHEST,
                                simconnect::SIMCONNECT_EVENT_FLAG_GROUPID_IS_PRIORITY,
                            );
                        };

                        let increase_thrust = |factor: f64| {
                            // Increases the throttle setting by a factor of x on every call.

                            // Makes sure throttle is not set above the highest setting.
                            if (throttle_setting + factor) == 1.0 {
                                set_throttle(1.0);
                            } else if throttle_setting < 1.0 {
                                set_throttle(throttle_setting + factor);
                            }
                        };

                        let decrease_thrust = |factor: f64| {
                            // Decreases the throttle setting by a factor of x on every call.

                            // Makes sure throttle is not set below the lowest setting.
                            if (throttle_setting - factor) == 1.0 {
                                set_throttle(0.0);
                            } else if throttle_setting > 0.0 {
                                set_throttle(throttle_setting - factor);
                            }
                        };

                        // Calculate the diff between current & target speed.
                        let diff = (sim_data_value.indicated_airspeed - target_speed).abs();

                        // If the speed is lower than the target and last speed, increase.
                        if (indicated_airspeed < target_speed) && (indicated_airspeed < last_speed) {
                            // If diff is less than 5 increase gently, if not, fast.
                            if diff < 5 {
                                increase_thrust(0.001)
                            } else {
                                increase_thrust(0.01)
                            }
                        }

                        // If the speed is higher than the target and last speed, decrease.
                        if (indicated_airspeed > target_speed) && (indicated_airspeed > last_speed) {
                            // If diff is less than 5 decrease gently, if not, fast.
                            if diff < 5 {
                                decrease_thrust(0.001)
                            } else {
                                decrease_thrust(0.01)
                            }
                        }

                        last_speed = indicated_airspeed
                    }
                },
                Ok(DispatchResult::Open(_)) => {
                    println!("Connected to simulator.");
                }
                Ok(DispatchResult::Quit(_)) => {
                    println!("Disconnected from simulator.");
                }
                _ => (),
            }
    
            sleep(Duration::from_millis(16));
        }
        
        // std::thread::sleep(std::time::Duration::from_millis(16));
    }
}
