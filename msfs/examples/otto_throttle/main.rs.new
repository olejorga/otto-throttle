use std::thread::sleep;
use std::time::Duration;
use simconnect::{DispatchResult, DWORD, SIMCONNECT_CLIENT_EVENT_ID, SIMCONNECT_OBJECT_ID};

struct SimVars {
    gen_eng_throttle_lever_pos: f32,
    airspeed_indicated: f32,
}

struct OttoThrottle {
    kp: f32,
}

impl OttoThrottle {
    fn blow(kp: f32) -> Self {
        OttoThrottle { kp }
    }

    fn throttle(&self, current_speed: f32, target_speed: f32, current_throttle: f32) -> f32 {
        let speed_error = target_speed - current_speed;
        let throttle_adjustment = self.kp * speed_error;
        let new_throttle = (current_throttle + throttle_adjustment).clamp(0.0, 1.0);

        return new_throttle
    }
}

fn main() {
    let mut conn = simconnect::SimConnector::new();

    conn.connect("O/T");

    conn.add_data_definition(
        0,
        "GENERAL ENG THROTTLE LEVER POSITION:1",
        "Percent",
        simconnect::SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_FLOAT32,
        0 as DWORD,
        0.0,
    );

    conn.add_data_definition(
        0,
        "AIRSPEED INDICATED",
        "Knots",
        simconnect::SIMCONNECT_DATATYPE_SIMCONNECT_DATATYPE_FLOAT32,
        1 as DWORD,
        0.0,
    );

    conn.request_data_on_sim_object(
        0,
        0,
        0,
        simconnect::SIMCONNECT_PERIOD_SIMCONNECT_PERIOD_SIM_FRAME,
        0,
        0,
        0,
        0,
    );

    conn.map_client_event_to_sim_event(
        0 as SIMCONNECT_CLIENT_EVENT_ID,
        "THROTTLE_SET"
    );

    let otto_throttle = OttoThrottle::blow(0.1);

    loop {
        println!("Enter target indicated airspeed (kt): ");

        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();
        let target_speed: f32 = input.trim().parse().unwrap();

        loop {
            match conn.get_next_message() {
                Ok(DispatchResult::SimObjectData(data)) => unsafe {
                    if data.dwDefineID == 0 {
                        let sim_vars_ptr = std::ptr::addr_of!(data.dwData) as *const SimVars;
                        let sim_vars_val = std::ptr::read_unaligned(sim_vars_ptr);

                        let current_speed = sim_vars_val.airspeed_indicated;
                        let current_throttle = sim_vars_val.gen_eng_throttle_lever_pos / 100.0;
                        let new_throttle = otto_throttle.throttle(current_speed, target_speed, current_throttle);

                        println!("THR: {}, SPD: {} (TGT: {})", current_throttle, current_speed, target_speed);

                        conn.transmit_client_event(
                            0 as SIMCONNECT_OBJECT_ID,
                            0 as SIMCONNECT_CLIENT_EVENT_ID,
                            (16383.0 * new_throttle).round() as DWORD,
                            simconnect::SIMCONNECT_GROUP_PRIORITY_HIGHEST,
                            simconnect::SIMCONNECT_EVENT_FLAG_GROUPID_IS_PRIORITY,
                        );
                    }
                },
                Ok(DispatchResult::Open(_)) => {
                    println!("Inflated Otto...");
                }
                Ok(DispatchResult::Quit(_)) => {
                    println!("Deflated Otto...");
                }
                _ => (),
            }
    
            sleep(Duration::from_millis(16));
        }
    }
}
